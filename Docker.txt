how to containerize spring boot appln and mysql server.
how to connect spring boot docker container with mysql docker container.
basics about docker network and docker volume.

//see docker images from local registry
docker images

//see running docker container
docker ps

//see all the container
docker ps -a

//remove the docker container
docker rm mysqldb


//remove the docker container forcefully
docker rm  -f mysqldb

//run mysql server image
docker run -p 3307:3306 --name mysqldb  -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=test mysql
//docker run -p external port number[host port number]:internal port number --name [ optional name of the container] -e [environment variable=value] -e [optional environment variable=value] [image name]
note:
if container is failed and you want to run again then remove first this container and next run

//run mysql server image on detach mode[-d]
docker run -d -p 3307:3306 --name mysqldb  -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=test mysql

//if you want to see information about docker container type
//docker logs [name of the container]
docker logs mysqldb

note:if docker container is failed then remove first and run again 

////////////////////////////////////////////////////////////////////
dockerize/containerize spring boot appln

//configure application.properties file based on mysql image
//application.properties
//here value is passed through based on environment variable and value is passed run time or dynamic

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/test
spring.datasource.username=${MYSQL_USER:laravel}
spring.datasource.password=${MYSQL_PASSWORD:laravel}

//right click on appln -run as -run configuration -arguments 
//write value //if not write then it takes default values
-DMYSQL_USER:root
-DMYSQL_PASSWORD:root
-DMYSQL_PORT:3307

//right click on appln-run as maven-maven install to build jar file //jar file is generated under /target directory
//jar file is required because based on jar file image will be create and run the container
//create Dockerfile //Dockerfile is bydefault file syntax write can be any name by default docker search based on this
FROM openjdk:8-alpine                    //FROM basename:tagname
ADD target/*.jar app.jar                 //ADD appln_jar_name image_name[image is created when executing build command]
ENTRYPOINT ["java","-jar","app.jar"]     //ENTRYPOINT ["java","-jar","app.jar"] //execute appln after run

//by default docker container is isolated from other docker container
if we want to connect one container to other container then create a network.

//see all network commands
docker network

//see all created network and network id
docker network ls
//connect to container
docker network connect spring-net mysqldb
//see docker network details
docker container inspect mysqldb

//run multiple containers with network 
docker run -p 9090:8080 --name app --net spring-net -e MYSQL_HOST=mysqldb -e MYSQL_USER=root -e MYSQL_PASSWORD=root -e MYSQL_PORT=3306 app
MYSQL_HOST=mysqldb //here MYSQL_HOST= is name of mysql container or docker container because you are running on docker not your host name 
--net spring-net //network name
//instead of writing environment variable in sinle line write inside a file called environment file

//env //file name //save in home on linux machine or any machine
MYSQL_HOST=mysqldb 
MYSQL_USER=root
MYSQL_PASSWORD=root 
MYSQL_PORT=3306 app

//docker run -p 9090:8080 --name app --net spring-net --env-file env app

//////////////////
//docker volume 
//when you restart or remove the mysql container then data may be lossed 
//so avoiding this create backup of the database
docker run -p 9090:8080 --name app --net spring-net --env-file env -v "/home/aman/Desktop/db":/var/lib/mysql mysqldb
//mapping the mysql db server to local or host directory
